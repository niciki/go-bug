// GENERATED BY 'T'ransport 'G'enerator. DO NOT EDIT.
package transport

import (
	"context"
	"github.com/rs/zerolog/log"
	"github.com/seniorGolang/dumper/viewer"
	"service/internal/interfaces"
	"time"
)

type loggerFouService struct {
	next interfaces.FouService
}

func loggerMiddlewareFouService() MiddlewareFouService {
	return func(next interfaces.FouService) interfaces.FouService {
		return &loggerFouService{next: next}
	}
}

func (m loggerFouService) PrintString(ctx context.Context, id string) (err error) {
	logger := log.Ctx(ctx).With().Str("service", "FouService").Str("method", "printString").Logger()
	defer func(begin time.Time) {
		fields := map[string]interface{}{
			"request":  viewer.Sprintf("%+v", requestFouServicePrintString{Id: id}),
			"response": viewer.Sprintf("%+v", responseFouServicePrintString{}),
			"took":     time.Since(begin).String(),
		}
		if err != nil {
			logger.Error().Err(err).Fields(fields).Msg("call printString")
			return
		}
		logger.Info().Fields(fields).Msg("call printString")
	}(time.Now())
	return m.next.PrintString(ctx, id)
}

func (m loggerFouService) Get(ctx context.Context, id string) (answ string, err error) {
	logger := log.Ctx(ctx).With().Str("service", "FouService").Str("method", "get").Logger()
	defer func(begin time.Time) {
		fields := map[string]interface{}{
			"request":  viewer.Sprintf("%+v", requestFouServiceGet{Id: id}),
			"response": viewer.Sprintf("%+v", responseFouServiceGet{Answ: answ}),
			"took":     time.Since(begin).String(),
		}
		if err != nil {
			logger.Error().Err(err).Fields(fields).Msg("call get")
			return
		}
		logger.Info().Fields(fields).Msg("call get")
	}(time.Now())
	return m.next.Get(ctx, id)
}
